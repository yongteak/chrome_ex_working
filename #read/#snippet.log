# tabs merge
fetch(chrome.extension.getURL('static/assets/resource/WEB-SCREEN-TIME-BACKUP_2021-01-02.json'))
    .then(resp => resp.json())
    .then(row => {
        // {key:domain, value:index}
        var tabs1 = row['tabs'];
        storage.getValue(CONFIG.STORAGE_TABS, tabs2 => {
            // var t = {};
            // tabs1.concat(tabs2).forEach(e => t[e.url] = e.url);
            // console.log(tabs1.concat(tabs2).length,Object.keys(t).length);
            var pivot = tabs1.concat(tabs2).reduce((prev, cur) => {
                var existing = prev.find(x => x.url === cur.url);
                if (existing) {
                    if (JSON.stringify(existing.days) !== JSON.stringify(cur.days)) {
                        var diff = existing.days.concat(cur.days).reduce((prev1, cur1) => {
                            var exist1 = prev1.find(x => x.date === cur1.date);
                            if (exist1) {
                                if (exist1.summary !== cur1.summary) {
                                    exist1.hours.forEach((e, idx) => {
                                        // counter가 작은쪽을 덮어씌운다.
                                        if (e.counter < cur1.hours[idx].counter) {
                                            e = cur1.hours[idx];
                                            exist1.summary += e.second;
                                            exist1.counter += e.counter;
                                            exist1.dataUsage += e.dataUsage;
                                            console.log(cur.url, exist1);
                                        }
                                    });
                                }
                            } else {
                                prev1.push(cur1);
                            }
                            return prev1;
                        }, []);
                        existing.days = diff;
                    }

                } else {
                    prev.push(cur)
                }
                return prev;
            }, []);
            console.log(pivot.find(p => p.url === 'www.google.com'));
        });
    });

# ISO3166 자료
https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/slim-3/slim-3.json

# modal팝업 부모 스크롤 없앰
http://stackoverflow.com/questions/9538868/prevent-body-from-scrolling-when-a-modal-is-opened
body.modal-open {
    overflow: hidden;
    position: fixed;
}

# Array 랜덤 생성
https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n

# 오늘을 기준으로 과거 week 날짜 생성
- 오늘 기준 주간 시작일
moment().startOf('week').format("YYYYMMDD");
- 특정 날짜 기준 주간 시작일
moment('20201223').startOf('week').format("YYYYMMDD");
- 주간 시작일로 부터 주간 마지막날까지 날짜 목록
var start = moment().startOf('week').format("YYYYMMDD");
var end = moment(start).endOf('week').format("YYYYMMDD");
var diff = moment(end).diff(moment(start),'days');
for (var i = 0; i < diff; i++) {
    console.log(moment(start).add(i, 'day').format("YYYYMMDD"));
};

* 최근 1개월
var start = moment().startOf('week').format("YYYYMMDD");
for (var i = 0; i < 30; i++) {
    console.log(moment(start).add(i, 'day').format("YYYYMMDD"));
};


# moment 주간 날짜 계산하기
https://momentjs.com/
https://stackoverflow.com/questions/34871998/how-to-get-the-days-b-w-current-week-in-moment-js
var currentDate = moment();
var weekStart = moment().startOf('week').format("YYYYMMDD");
var weekEnd = currentDate.clone().endOf('week');
var days = [];
for (i = 0; i <= 6; i++) {
    days.push(moment(weekStart).add(i, 'days').format("YYYYMMDD"));
};

var days = [];
Array.apply(null, Array(7)).map(function (_, i) {
    days.push(moment().clone().startOf('week').add(i,'days').format("YYYYMMDD"));
});


days;

console.log(days);

console.log(moment('01/19/2016').format("MMMM Do,dddd"));

var start = moment('20201220',"YYYYMMDD");
moment(start).add(-1,'day').format('YYYYMMDD');

var start = moment().format("YYYYMMDD");
Array.apply(null, Array(30)).map(function (_, i){
    return moment(start).add(-i,'day').format('YYYYMMDD')
});

};
Array.apply(null, Array(7)).map(function (_, i) {
    return moment(i, 'e').startOf('week').isoWeekday(i + 1).format('YYYYMMDD');
});



# erlang
ssl:start().
inets:start().
URL = "https://cors-anywhere.herokuapp.com/https://data.similarweb.com/api/v1/data?domain=music.bugs.co.kr".
Headers = [{"User-Agent", "PostmanRuntime"},{"Content-Encoding","UTF-8"},{"X-Requested-With", "xmlhttprequest"}].
{ok, {{_, _, _}, _, SimilarwebRes}} = httpc:request(get, {URL,Headers}, [], [{body_format,binary}]).



URL1 = "https://cors-anywhere.herokuapp.com/https://data.alexa.com/data?cli=10&url=music.bugs.co.kr".
{ok, {{_, _, _}, _, AlexaRes}} = httpc:request(get, {URL1,Headers}, [], [{body_format,binary}]).

{Xml,_} = xmerl_scan:string(binary_to_list(AlexaRes)).

[{xmlAttribute,_,_,_,_,_,_,_,CountryCode,_}] = xmerl_xpath:string("//SD//COUNTRY/@CODE", Xml).
[{xmlAttribute,_,_,_,_,_,_,_,CountryName,_}] = xmerl_xpath:string("//SD//COUNTRY/@NAME", Xml).
[{xmlAttribute,_,_,_,_,_,_,_,CountryRank,_}] = xmerl_xpath:string("//SD//COUNTRY/@RANK", Xml).
[{xmlAttribute,_,_,_,_,_,_,_,GlobalRank,_}] = xmerl_xpath:string("//SD//REACH/@RANK", Xml).

AlexaTuple = [{<<"CountryCode">>,boot_util:binary(CountryCode)},
 {<<"CountryName">>,boot_util:binary(CountryName)},
 {<<"CountryRank">>,boot_util:int(CountryRank)},
 {<<"GlobalRank">>,boot_util:int(GlobalRank)}].


SimilarwebTuple = jsx:decode(SimilarwebRes).

Save = jsx:encode([{<<"similarweb">>,SimilarwebTuple},{<<"alexa">>,AlexaTuple}]).

{ok,_} = ssdb:query([hset,<<"host_analytic">>,<<"music.bugs.co.kr">>,Save]).
 4urdev.tistory.com


# ssdb
key : host_analytic
name : naver.com
value : [json]

multi_hget name key1 key2 ...


{ok,_} = ssdb:query([hset,<<"host_analytic">>,<<"music.bugs.co.kr">>,Save]).

ssdb:query([hget,<<"host_analytic">>,<<"music.bugs.co.kr">>]).

ssdb:query([multi_hget,<<"host_analytic">>,<<"music.bugs.co.kr">>,<<"4urdev.tistory.com">>]).


ssdb:query([info]).


$scope.remove_all = function () {
    // console.log('remove!');
    fetch("https://crix-api-endpoint.upbit.com/v1/crix/trades/days?code=CRIX.UPBIT.KRW-SC&count=1")
        // .then(r => r.text()).then(result => {
        .then(function (response) {
            return response.json();
        })
        .then(function (myJson) {
            console.log(myJson);
        });


<button class="col-md-12 btn btn-danger" ng-click="remove_all()" type="submit">

# array 만들기
# https://echarts.apache.org/next/examples/en/editor.html?c=heatmap-cartesian
var hours = Array(24).fill(0).map((e,i)=>i+1);
var seconds = Array(60).fill(0).map((e,i)=>i+1);
# ip address
 function getLocalIPs() { // thanks to https://stackoverflow.com/a/29514292
            var ips = [];
            var RTCPeerConnection = window.RTCPeerConnection ||
                window.webkitRTCPeerConnection || window.mozRTCPeerConnection;
            var pc = new RTCPeerConnection({ iceServers: [] });
            pc.createDataChannel('');
            pc.onicecandidate = function (e) {
                if (!e.candidate) {
                    pc.close();
                    console.log(ips.join(', '));
                    // addToTable({ 'IP Addresses': ips.join(', ') });
                    return;
                }
                var ip = /^candidate:.+ (\S+) \d+ typ/.exec(e.candidate.candidate)[1];
                if (ips.indexOf(ip) == -1 && ip.substring(0, 11) != "100.115.92.") // ignore ARC++ and container IPs
                    ips.push(ip);
            };
            pc.createOffer(function (sdp) {
                pc.setLocalDescription(sdp);
            }, function onerror() { });
        };

# angular select
https://embed.plnkr.co/Wlw62X/preview

# echarts
 <mw-chart style="height: 100%; width: 100%; background-color: white;
                                margin-top: 20px; float: left; border-left: black;" ng-model="option">
                                </mw-chart>

var stop_count = 20;
        var obj = {data1:['New member','Old member'], data2:[621,32032]};
        var stop;
        $scope.fight = function() {
          // Don't start a new fight if we are already fighting
          if ( angular.isDefined(stop) ) return;

          stop = $interval(function() {
            --stop_count;
            obj.data2[0] += 800;
            obj.data2[1] -= 500;

            $scope.option = loadDataWithType(obj);
            if (stop_count == 0) {
                $scope.stopFight();
            }

          }, 500);
        };

        $scope.fight();


        $scope.stopFight = function() {
            if (angular.isDefined(stop)) {
              $interval.cancel(stop);
              stop = undefined;
            //   $scope.$apply();
            }
          };
$scope.option = loadDataWithType(obj);
function loadDataWithType(data) {
            if (data) {
                return {
                    tooltip: {
                        trigger: 'item',
                        formatter: "{a} <br/>{b}: {c} ({d}%)"
                    },
                    legend: {
                        itemHeight: 10,
                        itemWidth: 10,
                        orient: 'vertical',
                        x: 'center',
                        y: 'bottom',
                        icon: 'roundRect',
                        formatter: function(name) {
                            var index = 0;
                            var clientlabels = data.data1;
                            var clientcounts = data.data2;
                            clientlabels.forEach(function(value,i){
                                if(value == name){
                                    index = i;
                                }
                            });
                            return name + "  " + clientcounts[index];
                        }
                    },
                    series: [
                        {
                            name:'Male to female ratio',
                            type:'pie',
                            radius: ['45%', '53%'],
                            avoidLabelOverlap: false,
                            hoverAnimation: false,
                            data:[
                                {value:data.data2[0], name:'New member'},
                                {value:data.data2[1], name:'Old member'},
                            ],
                            itemStyle: {
                                normal:{
                                    label:{
                                        position : 'outside',
                                        formatter: '{d}%',
                                        fontSize: 10,
                                    },
                                    labelLine :{
                                        length: 2,
                                        length2: 2,
                                        show:false,
                                    }
                                }

                            }
                        }
                    ],
                    color:['#0090FF','#F6A20C'],
                    title: {
                        subtext: 'Total number of members',
                        text: parseInt(data.data2[0])+parseInt(data.data2[1]),
                        x: 'center',
                        y: 'center',
                        padding: 0,
                        itemGap: 0,
                        textStyle:{
                            fontSize: 20,
                        },
                        subtextStyle:{
                            fontSize: 10,
                        },
                    },
                    graphic: {
                        type: 'text',
                        style:{
                            x: 15,
                            y: 15,
                            font: 'bolder 1.2em "PingFang-SC-Medium", sans-serif',
                            text:'Proportion',
                        },
                    },

                };
            }

        }
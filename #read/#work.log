[TASK]
[2021-01-04 21:04:07]
 - tab 생성 주기 컨트롤
[2020-12-15 09:41:00]
 - 도메인별 종류 tag기록
[2021-01-01 06:50:44]
 - 동기화 조건
  * background 실행시 항상 업로드
  *
 - tabs 증분 데이터 분류방법
  * 다운로드 데이터에서 last_sync 필드 확인
  * 업로드시 tabs의 date에서 last_sync 이후 날짜만 추출하여 업로드
  * 서버시간 => utc0
  https://momentjs.com/timezone/
[2021-01-03 06:40:02]
 - 데이터 동기화 merge 모드
  * 1대 이상의 기기에서 동시 사용시 데이터 merge 구현
  * 반복적인 서버 장애로 동기화 실패에따른 오류에 대한 해결책
  * merge는 어디에서 해야하나? 서버또는 클라이언트 아니면 양쪽에서 진행
  * merge는 tabs만 해당함
[LOG]

[LINK]
https://developer.chrome.com/apps/storage
https://gyuyeon.tistory.com/6

[WORK]
[2020-12-16 13:55:02]
 - ecoch utx 시간 변환 참고
- https://www.epochconverter.com/timezones?q=1608094415&tz=Asia%2FSeoul
 - 해외 버전 출시를 위한 시스템 timezone 고민필요
[2020-12-15 22:52:19]
 - cors
 - https://cors-anywhere.herokuapp.com/https://data.similarweb.com/api/v1/data?domain=4urdev.tistory.com
[2020-12-12 00:43:34]
 - manifest v3 마이그레이션 진행
 - 알람 목록 기능 구현, UI고민 필요, 적용방안 미구현
[2020-12-01 14:56:40]
 - Time tracker + Usaged 코드 통합

[11/20]
 - Time tracker 코드 추가
 - https://chrome.google.com/webstore/detail/web-activity-time-tracker/hhfnghjdeddcfegfekjeihfmbjenlomm/related

[11/19]
 - web traffic 코드 추가
 - 일정시간마다 누적된 데이터 merge코드 필요

[TODO]
[2021-01-15 04:26:03]
 - 양방향 동기화 잘하는 방법
  * 로컬 db 2중화, new_db 다운로드후 old_db와 시간단위로 merge처리
  * 마지막 checkpoint기록후 merge진행
   => 1. background에서 push이후 변경분을 따로 관리 (new_tabs)
   => 2. pull이후 변경분을 merge후 다시 push한다.
[2021-01-12 15:11:52]
 - blacklist 상세 설명필요
  * naver.com => vive.naver.com 포함됨
[2021-01-12 10:26:09]
 - 추적 금지 도메인 정규식 도입
  * 숫자로만 된 도메인
  * localhost
  * ^admin.* 이 포함된 도메인

[2021-01-10 18:40:55]
 - 사용자가 다른 계정으로 로그인했을때 기존 로컬 데이터 처리 방안
[2021-01-10 15:54:32]
 - 카테고리 데이터 동기화
  * 로컬에서 마지막 동기화 24시간 이상 지난 목록만 동기화
[2021-01-07 18:49:37]
 - 공통 데이터는 couch에서 읽기전용으로 동기화
[2021-01-01 06:32:34]
 - 데이터가 없으면 0으로 표기
[2020-12-29 17:58:31]
 - timeinterval 제거
[2020-12-28 13:22:11]
 - status 팝업, textarea 높이 동적으로 처리
[2020-12-27 08:13:49]
 - tabs, interval 데이터 일관성 문제 발생, 데이터가 안맞음
[2020-12-27 07:28:09]
- 통계 메뉴 접근시 자동으로 오늘날짜 차트 선택하기
[2020-12-25 03:25:35]
 - 도메인 클릭시 상세화면 팝업 -> 상세 정보및 다양한 옵션 설정 기능 제공
[2020-12-23 09:33:20]
 - 관리자용 DB 구축 필요 : 설정정보, 도메인 정보 수집내역등
  . pouchdb
  . couchdb
  . cloudant (IBM)

[2020-12-23 00:43:34]
 - 차트
   - stack
    . y : 카테고리, x : 도메인별 사용시간
    . y : 케테고리, x : 도메인별 사용량
    . y : 시간, x : 카테고리별 사용시간 (24h)
[2020-12-22 22:14:03]
 - deleteYesterdayTimeInterval() 기능 제거, 일단위로 자동 삭제됨.
[2020-12-18 21:07:44]
 - 클라우드에 업로드시 서버에서는 카테고리 정보를 tabs 컬렉션에 추가한다.
 - 우선 저장하고 클라이언트에 다운로드할때 카테고리 정보를 추가한다. (저장 전에 카테고리 정보가 없을확률이 높음)
 - 카테고리 필드가 제대로 없는경우(null, undefiend등 정상적인 텍스트 정보가 아닌경우)의 항목만 재검출한다.
 - 매번 클라이언트에 다운로드할때마다 카테고리 정보 갱신을 하는 방식은 성능 저하 발생 문제 우려됨. 방법 필요
[2020-12-17 21:50:52]
클라이언트에서 카테고리 정보가 없는 도메인 목록을 일정 단위씩으로(3~40개) 서버에 카테고리 정보 요청함
 - 클라이언트에서 tabs 테이블에 카테고리 필드 항목을 추가한다. (데이터 용량 늘어나는 문제는 어쩔수 없는듯?)
 - 통계용으로 집계된 데이터는 새로운 테이블에 저장하여 빠르게 로드할수 있도록한다. 해당 테이블도 클라우드로 동기화함
[2020-12-16 08:07:12]
msgpack 적용
https://github.com/kawanet/msgpack-lite
https://github.com/msgpack/msgpack-erlang

jwt 공개키 적용
https://github.com/potatosalad/erlang-jose/tree/1.7.9

[2020-12-16 07:36:59]
- ngnix ssl인증서 적용하기
https://velog.io/@pinot/Ubuntu-18.04%EC%97%90%EC%84%9C-Lets-Encrypt%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-Nginx%EC%97%90-SSL%EC%9D%84-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95
..https://velog.io/@pinot/Ubuntu-Nginx-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-CertBot%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0
[2020-12-15 11:48:42]
chrome sync 동기화 과정
 1. 앱 실행시 크롬에서 데이터 다운로드
 2. 로컬 덮어씌우기
 3. 5분마다 크롬으로 업로드
 => 2개의 기기에서 동일한 계정으로 크롬 확장기능을 사용할경우?
   => merge는 불가함
[2020-12-15 09:41:25]
chrome sync는 하나의 key에 8Kb데이터만 저장가능, 분할 저장 기능 구현필요
[2020-12-12 10:35:29]
collections
 - master settings : 중아 collection목록 관리
[2020-12-10 13:47:30]
https://github.com/firebase/snippets-node/blob/48ca0c7e7dabe2777b40cbd1d8efb5194711c217/firestore/extend-with-functions/functions/index.js#L5-L9
소스코드 분석, alexa,similarweb사용가능
https://chrome.google.com/webstore/detail/alexa-and-similarweb-rank/ikompppmnedgfglopochecapchmlehle/related
[2020-12-09 00:39:05]
 - 통계 목록에서 제한된 사에트는 표식을 설정한다.
[2020-12-08 15:49:32]
 - 설정 화면에서 패스워드 기능
 - 제한된 도메인에 대한 화면 표현 방법 설정 기능
   - 웹 페이지내 alert또는 화면 한쪽에서 표현
   - 경고 페이지로 강제 이동
- 제한 : 허용시간 -> 사용금지 체크 박스 기능 추가
[2020-12-04 01:08:04]
 - 유틸리티 메뉴 추가 : 가능한경우 마우스 우측기능에서 제공
  - 인스타 이미지 다운로드
  - 클리앙 이미지 다운로드
  - 링크 동시 열기 기능
  - 나중읽기 기능
  - 웹 아카이브 기능
  - 웹 스크롤 전체 화면 캡쳐
  - 웹 스크롤 전체 화면 PDF저장
[2020-12-03 05:56:20]
- 마우스 우클릭, 드래그기능 활성화
- 키워드 분석하기 요청

[2020-12-03 04:34:19]
 - 10초 이상, 5분미만 제외(원페이지 사이트 제외) 방문했던 페이지 URL 수집, 개별 URL마다 방문했던 횟수 기록


슬라이드 기능 구현
- https://www.similarweb.com/corp/extension-welcome/
데이터 모델링
 - 지정된 도메인 목록을 기준으로 사용량 평가, 나머지는 그외 항목으로 지정
 - 데이터 사용량에 대한 누적량 계측 방안 구현
[ISSU]
[2020-12-04 10:50:53]
PerformanceObserver Behind 페이지 데이터 수집 못함

[Library]
https://angular-ui.github.io/bootstrap/
https://morgul.github.io/ui-bootstrap4/

[git]
gitignore작업
- https://gmlwjd9405.github.io/2017/10/06/make-gitignore-file.html

[Theme]
https://codentheme.com/item/label-free-admin-dashboard-template/
https://codentheme.com/item/label-pro-responsive-admin-dashboard-template/
https://themes.getbootstrap.com/product/falcon-admin-dashboard-webapp-template/
https://themes.getbootstrap.com/product/keen-the-ultimate-bootstrap-admin-theme/

[읽기]
데이터 리소스 읽기
https://developers.google.com/web/updates/2016/06/performance-observer
소스코드, 리뷰 결과 안좋음, 참고만 할것
https://chrome.google.com/webstore/detail/data-usage/dopfdeikfpadofngjnjokfgmboicnppc?hl=en-GB
https://chrome.google.com/webstore/detail/net-usage-extension/dcoehgalcmebfjgkbhbpllfhjcclkjan?hl=en-GB

[Chrome]
Firebase사용하기
https://developers-kr.googleblog.com/2016/08/how-to-use-firebase-in-chrome-extension.html

[Chart]
https://developer.aliyun.com/mirror/npm/package/angular-calendar-heatmap
https://echarts.apache.org/next/examples/en/index.html

[eCharts]
https://programming.vip/docs/echarts-dynamically-refresh-data.html

주단위 활용
https://echarts.apache.org/next/examples/en/editor.html?c=heatmap-cartesian


[manifest.json]
https://github.com/RomanistHere/HR-Helper/blob/main/manifest.json


# nodejs 가상 브라우저
https://khackskjs.github.io/2018/02/09/Web-Crawling-with-Selenium-on-Node-js/